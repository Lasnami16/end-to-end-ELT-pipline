#STEP 1: Authenticate Docker with Artifact Registry
gcloud auth configure-docker europe-west9-docker.pkg.dev
#STEP 2: Build the Docker Image Locally
docker build -t europe-west9-docker.pkg.dev/wissem-school/end-to-end-etl-pipline/mongodb-to-gcs-job .
STEP 3: Push the Docker Image to Artifact Registry
docker push europe-west9-docker.pkg.dev/wissem-school/end-to-end-etl-pipline/mongodb-to-gcs-job
# STEP 4: Deploy as a Cloud Run Job
gcloud run jobs create mongodb-to-gcs-job \
  --image europe-west9-docker.pkg.dev/wissem-school/end-to-end-etl-pipline/mongodb-to-gcs-job \
  --region europe-west9 \
  --set-env-vars MONGODB_CONNECTION="mongodb+srv://lasnamiabdelkarim:O9ztKaKpOGxZna9w@translation.d7i1rqk.mongodb.net/?retryWrites=true&w=majority&appName=translation",GCS_BUCKET_NAME="traduction_rapidos",GOOGLE_APPLICATION_CREDENTIALS="/app/credentials.json" \
  --memory 512Mi \
  --service-account google-drive@wissem-school.iam.gserviceaccount.com

#create first time the cloud run
gcloud run jobs create mongodb-to-gcs-job --image europe-west9-docker.pkg.dev/wissem-school/end-to-end-etl-pipline/mongodb-to-gcs-job --region europe-west9 --set-env-vars MONGODB_CONNECTION="mongodb+srv://lasnamiabdelkarim:O9ztKaKpOGxZna9w@translation.d7i1rqk.mongodb.net/?retryWrites=true&w=majority&appName=translation",GCS_BUCKET_NAME="traduction_rapidos",GOOGLE_APPLICATION_CREDENTIALS="/app/credentials.json",GCS_FOLDER="translations" --memory 512Mi --service-account google-drive@wissem-school.iam.gserviceaccount.com


gcloud run jobs create mongodb-to-gcs-job --image europe-west9-docker.pkg.dev/wissem-school/end-to-end-etl-pipline/mongodb-to-gcs-job --region europe-west9 --set-env-vars MONGODB_CONNECTION="mongodb+srv://cwfswgs:O9ztKaKpOGxZna9w@wfsvff.d7i1rqk.mongodb.net/?retryWrites=true&w=majority&appName=translation",GCS_BUCKET_NAME="traduction_rapidos",GOOGLE_APPLICATION_CREDENTIALS="/app/credentials.json",GCS_FOLDER="translations" --memory 512Mi --service-account wwc-drive@wfr-wrw.iam.gserviceaccount.com


gcloud run jobs update mongodb-to-gcs-job `
  --image europe-west9-docker.pkg.dev/wissem-school/end-to-end-etl-pipline/mongodb-to-gcs-job `
  --region europe-west9 `
  --set-env-vars "MONGODB_CONNECTION='mongodb+srv://lasnamiabdelkarim:O9ztKaKpOGxZna9w@translation.d7i1rqk.mongodb.net/?retryWrites=true&w=majority&appName=translation',GCS_BUCKET_NAME='traduction_rapidos',GOOGLE_APPLICATION_CREDENTIALS='/app/credentials.json',GCS_FOLDER='translations',TEST='test'" `
  --memory 512Mi `
  --service-account google-drive@wissem-school.iam.gserviceaccount.com

test

#ALL in One
gcloud auth configure-docker europe-west9-docker.pkg.dev
docker build -t europe-west9-docker.pkg.dev/wissem-school/end-to-end-etl-pipline/mongodb-to-gcs-job .
docker push europe-west9-docker.pkg.dev/wissem-school/end-to-end-etl-pipline/mongodb-to-gcs-job
gcloud run jobs update mongodb-to-gcs-job `
  --image europe-west9-docker.pkg.dev/wissem-school/end-to-end-etl-pipline/mongodb-to-gcs-job `
  --region europe-west9 `
  --set-env-vars "MONGODB_CONNECTION='mongodb+srv://lasnamiabdelkarim:O9ztKaKpOGxZna9w@translation.d7i1rqk.mongodb.net/?retryWrites=true&w=majority&appName=translation',GCS_BUCKET_NAME='traduction_rapidos',GOOGLE_APPLICATION_CREDENTIALS='/app/credentials.json',GCS_FOLDER='translations',TEST='test'" `
  --memory 512Mi `
  --service-account google-drive@wissem-school.iam.gserviceaccount.com




#passe the encoded credentials.json file:
[Convert]::ToBase64String([System.IO.File]::ReadAllBytes("C:\Users\hp\OneDrive\Bureau\projects\end-to-end-ELT-pipline\cloud-run-job-mongodb-to-gcs\credentials.json")) > encoded.txt 






###### deploy.yml works:
name: Deploy to Cloud Run Job

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS_JSON }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'beta'

      - name: Write credentials.json to Docker context
        run: |
          echo '${{ secrets.GOOGLE_CREDENTIALS_JSON }}' > cloud-run-job-mongodb-to-gcs/credentials.json

      - name: Authenticate Docker with Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.REPOSITORY }}/${{ secrets.IMAGE_NAME }} cloud-run-job-mongodb-to-gcs

      - name: Push Docker image
        run: |
          docker push ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.REPOSITORY }}/${{ secrets.IMAGE_NAME }}

      - name: Deploy Cloud Run Job
        run: |
          gcloud run jobs deploy mongodb-to-gcs-job \
            --image ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.REPOSITORY }}/${{ secrets.IMAGE_NAME }} \
            --region ${{ secrets.REGION }} \
            --set-env-vars "MONGODB_CONNECTION=${{ secrets.MONGODB_CONNECTION }},GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }},GCS_FOLDER=${{ secrets.GCS_FOLDER }},GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS}}" \
            --memory 512Mi \
            --service-account ${{ secrets.SERVICE_ACCOUNT_EMAIL }}







############### mount credentials.json to docker image (this is to test the pythob job on a local docker image):
docker run --env-file .env \
  -v /Users/abdelkarimlasnami/Desktop/projects/end-to-end-ELT-pipline/cloud-run-job-mongodb-to-gcs/infra/gcp_credentials/etl-gcs-uploader-credentials.json:/app/credentials.json \
  -e GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json \
  mongodb-to-gcs-job



##########
Before building the image on cloud run job make sure to export the .env variables:
export $(grep -v '^#' .env | xargs)

Then check:
echo $MONGODB_CONNECTION
echo $GCS_BUCKET_NAME
echo $GCS_FOLDER

Then build and push:
gcloud builds submit --config=cloudbuild.yaml \
  --substitutions=_MONGODB_CONNECTION="your_mongodb_uri",_GCS_BUCKET_NAME="bucket_name",_GCS_FOLDER="folder_name"



